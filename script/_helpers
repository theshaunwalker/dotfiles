#!/usr/bin/env bash

section_count=0

section_padding () {
  for ((i=0;i<section_count;i++));
  do
    printf "  "
  done
}

enter_section () {
  section_padding
  printf "[\033[1;37m====\033[0m] $1\n"
  ((section_count++))

  return 0
}

exit_section () {
  ((section_count--))
  printf "\n"
}

print_output () {
  section_padding
  printf "       $1\n"
}
print_info () {
  section_padding
  printf "[ \033[0;34m..\033[0m ] $1\n"
}

print_prompt () {
  section_padding
  printf "[ \033[0;33m??\033[0m ] $1\n"
}

print_success () {
  section_padding
  printf "\033[2K  [ \033[0;32mOK\033[0m ] $1\n"
}

print_error () {
  section_padding
  printf "\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if cmp -s $src $dst
  then
      print_info "$src is identical to $dst - skipping symlink"
      return 0
  fi

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        print_prompt "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      print_success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      print_success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      print_success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    print_success "linked $1 to $2"
  fi
}

# Does the *.symlink symbolic link work
# Does not overwrite, used to ensure symlinks are done.
# Safe to rerun. Will skip all dupes.
ensure_symlinks () {
  enter_section 'ensuring symlinks'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  exit_section
}